<header class="page">
  <div class="patterns"></div>
  <div class="container content">
    <div class="row">
      <div class="span10 offset1">
        <h4>Js- Modal</h4>
      </div>
    </div>
  </div>
</header>
<div class="container container-box">
  <div class="row">
    <div class="span10 offset1">
      <div class="box">
        <p>The Modal's role is to show alert message, with a choice of functions in the control buttons.</p>
        <p><strong>Requirements:</strong></p>
        <ul>
          <li><%= link_to :Core, js_core_path %></li>
          <li><%= link_to :Button, js_button_path %></li>
        </ul>

        <div class="example">
          <div class="title">
            example
          </div>
          <div class="content">
            <div id="alerts" class="alerts"></div>
            <div id="button" class="m-b-20"></div>
            <p><strong>Configuration Modal</strong></p>
            <div><input type="text" id="your_name" placeholder="your name" /></div>
            <div><input type="text" id="title" placeholder="title modal" /></div>
            <div><input type="text" id="ok_click" placeholder="ok click" /></div>
            <div><input type="text" id="cancel_click" placeholder="cancel click" /></div>
          </div>
          <%= content_for :footer do %>
            <script type="text/javascript">
              jQuery(document).ready(function(){
                var create_modal;
                create_modal = function(){
                  var title, name, ok, cancel;
                  title = jQuery("#title").val() || "Title default";
                  name  = jQuery("#your_name").val() || "Name default";
                  new Lol.Modal({
                    buttons  : 'OK_CANCEL', // OK | OK_CANCEL | CANCEL | YES_NO
                    content  : 'Hello <strong>' + name + '</strong>',
                    close    : false,
                    title    : title,
                    buttonParams: {
                      fn: {
                        OK_CLICK: function(event, obj){
                          new Lol.Alert({
                            message: "Handler ok click, with message: " + jQuery("#ok_click").val()
                          });
                        },
                        CANCEL_CLICK: function(event, obj){
                          new Lol.Alert({
                            type   : "warning",
                            message: "Handler cancel click, with message: " + jQuery("#cancel_click").val()
                          });
                        }
                      }
                    }
                  });
                };
                new Lol.Button({
                  text     : "show modal",
                  container: "#button",
                  callback : {
                    click: function(event, object){
                      create_modal();
                    }
                  }
                });
              });
            </script>
          <% end %>
        </div>

        <div class="example">
          <div class="title">
            code
          </div>
          <div class="content">
            <ul class="nav nav-tabs">
              <li class="active"><a href="#example-1-html" data-toggle="tab">Html</a></li>
              <li><a href="#example-1-js" data-toggle="tab">JS</a></li>
            </ul>
            <div class="tab-content">
              <div class="tab-pane active" id="example-1-html">
                <pre class="prettyprint lang-html linenums"><%= %`<div id="alerts" class="alerts"></div>
<div id="button" class="m-b-20"></div>
<p><strong>Configuration Modal</strong></p>
<div><input type="text" id="your_name" placeholder="your name" /></div>
<div><input type="text" id="title" placeholder="title modal" /></div>
<div><input type="text" id="ok_click" placeholder="ok click" /></div>
<div><input type="text" id="cancel_click" placeholder="cancel click" /></div>` %></pre>
              </div>
              <div class="tab-pane" id="example-1-js">
                <pre class="prettyprint lang-js linenums"><%= %`jQuery(document).ready(function(){
  var create_modal;
  create_modal = function(){
    var title, name, ok, cancel;
    title = jQuery("#title").val() || "Title default";
    name  = jQuery("#your_name").val() || "Name default";
    new Lol.Modal({
      buttons  : 'OK_CANCEL', // OK | OK_CANCEL | CANCEL | YES_NO
      content  : 'Hello <strong>' + name + '</strong>',
      close    : false,
      title    : title,
      buttonParams: {
        fn: {
          OK_CLICK: function(event, obj){
            new Lol.Alert({
              message: "Handler ok click, with message: " + jQuery("#ok_click").val()
            });
          },
          CANCEL_CLICK: function(event, obj){
            new Lol.Alert({
              type   : "warning",
              message: "Handler cancel click, with message: " + jQuery("#cancel_click").val()
            });
          }
        }
      }
    });
  };
  new Lol.Button({
    text     : "show modal",
    container: "#button",
    callback : {
      click: function(event, object){
        create_modal();
      }
    }
  });
});` %></pre>
              </div>
            </div>
          </div>
        </div>
        <hr />
        <h4 id="all_configurations">All configurations</h4>
        <p>The class of "Modal" has several parameters that can be passed in their time of instantiation. Below you can
          see all of these parameters allowed.</p>
        <pre class="prettyprint lang-js linenums"><%= %`var modal;
modal = new Lol.Modal({
  buttons: false,
  content: null,
  close: true,
  debug: false,
  title: null,
  buttonParams: {},
  callbacks: {
    initialize   : function(object) {},
    buttonClick  : function(button, object) {},
    afterDestroy : function(object) {},
    beforeDestroy: function(object) {}
  },
  containers: {
    buttons: 'lol_modal_buttons',
    close  : 'lol_modal_close',
    content: 'lol_modal_content',
    main   : 'lol_modal_main',
    title  : 'lol_modal_title'
  },
  stylesheets: {
    buttons: {},
    close  : {},
    content: {},
    main   : {},
    title  : {}
  },
  classes: {
    buttons: 'modal-footer',
    close  : 'close',
    content: 'modal-body',
    main   : 'modal hide fade',
    title  : 'modal-header'
  }
});` %></pre>

        <blockquote>
          <strong>buttons</strong> (<code>Boolean</code> | Default: <code>false</code>)
          <p>All objects "Modal" at the bottom may contain an outline of buttons to control actions and conclusions.
            These buttons are created from the class Lol.Button. See the documentation for more details.</p>
        </blockquote>

        <blockquote>
          <strong>content</strong> (<code>String</code> | Default: <code>null</code>)
          <p>String containing the HTML that will be inserted in the body of "Modal".</p>
        </blockquote>

        <blockquote>
          <strong>close</strong> (<code>Boolean</code> | Default: <code>true</code>)
          <p>Sets whether to add the button to close the top of the Modal. Case is false, it is disabled all forms of
            closure Modal somento taking control of buttons added in the footer. The button close to the top, when
            clicked or object created "backdrop", the modal element is taken not put any runs pre configured callback.</p>
        </blockquote>

        <blockquote>
          <strong>debug</strong> (<code>Boolean</code> | Default: <code>false</code>)
          <p>Sets whether the framework should print debug messages to the user.</p>
        </blockquote>

        <blockquote>
          <strong>title</strong> (<code>String</code> | Default: <code>null</code>)
          <p>String containing HTML that is inserted into the top of Modal.</p>
        </blockquote>

        <blockquote>
          <strong>buttonParams</strong> ( <code>Object</code> )
          <p>Object containing the parameters of the buttons, if any is required. See the official documentation.
          <%= link_to :link, js_button_path -%></p>
        </blockquote>

        <blockquote>
          <strong>callbacks</strong> ( <code>Object</code> )
          <p>This object contains functions for callbacks run in actions defined Modal system.</p>

          <blockquote>
            <strong>initialize</strong> (<code>Function</code> | Params: <code>Modal -> object</code>)
            <p>Receives a function that is performed after the creation of the Modal. You receive a parameter that
              refers to the object Modal own (class).</p>
          </blockquote>

          <blockquote>
            <strong>buttonClick</strong> (<code>Function</code> | Params: <code>Button -> button</code>, <code>Modal -> object</code>)
            <p>Feature executed after the click of the button the footer. First shot is the function of the button
              element and only after this is executed. This method takes two parameters namely: Button, the reference
              class that button was clicked, Modal is the reference class Modal created.</p>
          </blockquote>

          <blockquote>
            <strong>afterDestroy</strong> (<code>Function</code> | Params: <code>Modal -> object</code>)
            <p>Feature run every time before starting the exclusion of Modal. Receives a parameter "Modal" that refers
              to class Modal created.</p>
          </blockquote>

          <blockquote>
            <strong>beforeDestroy</strong> (<code>Function</code> | Params: <code>Modal -> object</code>)
            <p>Function performed every time after the exclusion of Modal. Receives a parameter "Modal" that refers to
              class Modal created.</p>
          </blockquote>
        </blockquote>

        <blockquote>
          <strong>containers</strong> ( <code>Object</code> )
          <p>Object containing the "id" identifier for each element of the modal.</p>

          <blockquote>
            <strong>buttons</strong> ( <code>String</code> | Default: <code>lol_modal_buttons</code> )
            <p>Receives a string containing the "id" container identification buttons.</p>
          </blockquote>

          <blockquote>
            <strong>close</strong> ( <code>String</code> | Default: <code>lol_modal_close</code> )
            <p>Receives a string containing the "id" container identification close.</p>
          </blockquote>

          <blockquote>
            <strong>content</strong> ( <code>String</code> | Default: <code>lol_modal_content</code> )
            <p>Receives a string containing the "id" container identification content.</p>
          </blockquote>

          <blockquote>
            <strong>main</strong> ( <code>String</code> | Default: <code>lol_modal_main</code> )
            <p>Receives a string containing the "id" container identification modal.</p>
          </blockquote>

          <blockquote>
            <strong>title</strong> ( <code>String</code> | Default: <code>lol_modal_title</code> )
            <p>Receives a string containing the "id" container identification title.</p>
          </blockquote>
        </blockquote>

        <blockquote>
          <strong>stylesheets</strong> ( <code>Object</code> )
          <p>Object counting the stylesheets that should be added to each object Modal.</p>

          <blockquote>
            <strong>buttons</strong> ( <code>Object</code> | Default: <code>{}</code> )
            <p>Object containing the elements CSS to be inserted into the container of "buttons".</p>
          </blockquote>

          <blockquote>
            <strong>close</strong> ( <code>Object</code> | Default: <code>{}</code> )
            <p>Object containing the elements CSS to be inserted into the container of "close".</p>
          </blockquote>

          <blockquote>
            <strong>content</strong> ( <code>Object</code> | Default: <code>{}</code> )
            <p>Object containing the elements CSS to be inserted into the container of "content".</p>
          </blockquote>

          <blockquote>
            <strong>main</strong> ( <code>Object</code> | Default: <code>{}</code> )
            <p>Object containing the elements CSS to be inserted into the container of "modal".</p>
          </blockquote>

          <blockquote>
            <strong>title</strong> ( <code>Object</code> | Default: <code>{}</code> )
            <p>Object containing the elements CSS to be inserted into the container of "title".</p>
          </blockquote>
        </blockquote>

        <blockquote>
          <strong>classes</strong> ( <code>Object</code> )
          <p>Object containing the classes that will be inserted into every element of Modal.</p>

          <blockquote>
            <strong>buttons</strong> ( <code>String</code> | Default: <code>modal-footer</code> )
            <p>Style class that will be inserted to the element of "buttons".</p>
          </blockquote>

          <blockquote>
            <strong>close</strong> ( <code>String</code> | Default: <code>close</code> )
            <p>Style class that will be inserted to the element of "close".</p>
          </blockquote>

          <blockquote>
            <strong>content</strong> ( <code>String</code> | Default: <code>modal-body</code> )
            <p>Style class that will be inserted to the element of "content".</p>
          </blockquote>

          <blockquote>
            <strong>main</strong> ( <code>String</code> | Default: <code>modal hide fade</code> )
            <p>Style class that will be inserted to the element of "modal".</p>
          </blockquote>

          <blockquote>
            <strong>title</strong> ( <code>String</code> | Default: <code>modal-header</code> )
            <p>Style class that will be inserted to the element of "title".</p>
          </blockquote>
        </blockquote>

        <hr />
        <h4 id="methods">Methods</h4>
        <p>The class with Modal method can be executed after its creation check the list below.</p>

        <blockquote>
          <strong>destroy</strong>
          <p>Responsible for deleting the modal element of the browser screen.</p>
          <blockquote>
            <pre class="prettyprint linenums lang-js"><%= %`var modal;
modal = new Lol.Modal();
modal.destroy();` %></pre>
          </blockquote>
        </blockquote>

        <hr />
        <h4 id="change_defaults">Change Default Configuration</h4>
        <p>The class "Modal" allows you to set a new standard configuration model. Below you can see the content
          standard and how it is configured.</p>
        <pre class="prettyprint linenums lang-js"><%= %`Lol.modal = {
  defaults: {
    /*
    This parameter facilitates the creation of
    control buttons
    Accepts: OK | OK_CANCEL | CANCEL | YES_NO
    @type {String}
    */
    buttons: false,
    /*
    String containing the HTML that will be inserted
    in the body of "Modal"
    @type {String}
    */
    content: null,
    /*
    Sets whether to add the button to close the
    top of the Modal
    @type {Boolean}
    */
    close: true,
    /*
    Sets whether the framework should print debug
    messages to the user
    @type {Boolean}
    */
    debug: false,
    /*
    String containing HTML that is inserted into
    the top of Modal
    @type {String}
    */
    title: null,
    /*
    Object containing the parameters of the buttons,
    if any is required. See the official documentation
    @see Lol.Button
    @type {Object}
    */
    buttonParams: {},
    /*
    This object contains functions for callbacks
    run in actions defined Modal system
    @type {Object}
    */
    callbacks: {
      /*
      Receives a function that is performed after the
      creation of the Modal
      @param {Modal}
      @type {Function}
      */
      initialize: function(object) {},
      /*
      Feature executed after the click of the
      button the footer
      @param {Button}
      @param {Modal}
      @type {Function}
      */
      buttonClick: function(button, object) {
        return object.destroy();
      },
      afterDestroy: function(object) {},
      /*
      Function performed every time after the
      exclusion of Modal
      @param {Modal}
      @type {Function}
      */
      beforeDestroy: function(object) {}
    },
    /*
    Object containing the "id" identifier
    for each element of the modal
    @type {Object}
    */
    containers: {
      /*
      Receives a string containing the "id" container
      identification buttons
      @type {String}
      */
      buttons: 'lol_modal_buttons',
      /*
      Receives a string containing the "id" container
      identification close
      @type {String}
      */
      close: 'lol_modal_close',
      /*
      Receives a string containing the "id" container
      identification content
      @type {String}
      */
      content: 'lol_modal_content',
      /*
      Receives a string containing the "id" container
      identification modal
      @type {String}
      */
      main: 'lol_modal_main',
      /*
      Receives a string containing the "id" container
      identification title
      @type {String}
      */
      title: 'lol_modal_title'
    },
    /*
    Object counting the stylesheets that
    should be added to each object Modal
    @type {Object}
    */
    stylesheets: {
      /*
      Object containing the elements CSS to be inserted
      into the container of "buttons"
      @type {Object}
      */
      buttons: {},
      /*
      Object containing the elements CSS to be inserted
      into the container of "close"
      @type {Object}
      */
      close: {},
      /*
      Object containing the elements CSS to be inserted
      into the container of "content"
      @type {Object}
      */
      content: {},
      /*
      Object containing the elements CSS to be inserted
      into the container of "modal"
      @type {Object}
      */
      main: {},
      /*
      Object containing the elements CSS to be inserted
      into the container of "title"
      @type {Object}
      */
      title: {}
    },
    /*
    Object containing the classes that will
    be inserted into every element of Modal
    @type {Object}
    */
    classes: {
      /*
      Style class that will be inserted to the
      element of "buttons"
      @type {String}
      */
      buttons: 'modal-footer',
      /*
      Style class that will be inserted to the
      element of "buttons"
      @type {String}
      */
      close: 'close',
      /*
      Style class that will be inserted to the
      element of "buttons"
      @type {String}
      */
      content: 'modal-body',
      /*
      Style class that will be inserted to the
      element of "buttons"
      @type {String}
      */
      main: 'modal hide fade',
      /*
      Style class that will be inserted to the
      element of "buttons"
      @type {String}
      */
      title: 'modal-header'
    }
  }
};` %></pre>
      </div>
    </div>
  </div>
</div>