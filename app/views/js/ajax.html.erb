<div id="alerts" class="alerts"></div>
<div class="row">
  <div class="span10 offset1">
    <div class="box">
      <h2>Js - Ajax</h2>
      <p>The object of "Ajax" aims to make it easier to make a request "ajax". Uses the resources of jQuery, already
        implemented the "csrf-token" to requests within Rails applications. See example set out below:</p>

      <div class="example">
        <div class="title">
          example
        </div>
        <div class="content">
          <button class="btn" id="btn_ajax">Get content by ajax</button>
          <div id="content_ajax"></div>
        </div>
        <%= content_for :footer do %>
          <script type="text/javascript">
            jQuery(document).ready(function(){
              jQuery("#btn_ajax").click(function(){
                var lol_ajax;
                lol_ajax = new Lol.Ajax({
                  url        : '/content.html',
                  method     : 'GET',
                  dataType   : 'html',
                  callbacks: {
                    error:      function(jqXHR, textStatus, errorThrown){
                      new Lol.Alert({
                        type:    'error',
                        message: "<strong>Status:</strong> "+jqXHR.status+" | <strong>Text:</strong> " + jqXHR.statusText
                      });
                    },
                    success:    function(data, textStatus, jqXHR){
                      jQuery("#content_ajax").html(jqXHR.responseText);
                    }
                  }
                });
              });
            });
          </script>
        <% end %>
      </div>

      <div class="example">
        <div class="title">
          code
        </div>
        <div class="content">
          <ul class="nav nav-tabs">
            <li class="active"><a href="#example-1-html" data-toggle="tab">Html</a></li>
            <li><a href="#example-1-js" data-toggle="tab">JS</a></li>
          </ul>
          <div class="tab-content">
            <div class="tab-pane active" id="example-1-html">
              <pre class="prettyprint lang-html linenums"><%= %`<button class="btn" id="btn_ajax">Get content by ajax</button>
<div id="content_ajax"></div>` %></pre>
            </div>
            <div class="tab-pane" id="example-1-js">
              <pre class="prettyprint lang-js linenums"><%= %`jQuery(document).ready(function(){
  jQuery("#btn_ajax").click(function(){
    var lol_ajax;
    lol_ajax = new Lol.Ajax({
      url        : '/content.html',
      method     : 'GET',
      dataType   : 'html',
      callbacks: {
        error:      function(jqXHR, textStatus, errorThrown){
          new Lol.Alert({
            type:    'error',
            message: "<strong>Status:</strong> "+jqXHR.status+
            " | <strong>Text:</strong> " + jqXHR.statusText
          });
        },
        success:    function(data, textStatus, jqXHR){
          jQuery("#content_ajax").html(jqXHR.responseText);
        }
      }
    });
  });
});` %></pre>
            </div>
          </div>
        </div>
      </div>
      <hr />
      <h4 id="all_configurations">All configurations</h4>
      <p></p>
      <pre class="prettyprint lang-js linenums"><%= %`var lol_ajax = new Lol.Ajax({
  autoExecute: true,
  useLoader  : true,
  contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
  url        : 'http://www.google.com/',
  method     : 'GET',
  data       : {},
  dataType   : 'html',
  callbacks: {
    beforeSend: function(jqXHR, settings){},
    complete:   function(jqXHR, textStatus){},
    error:      function(jqXHR, textStatus, errorThrown){},
    success:    function(data, textStatus, jqXHR){}
  }
});` %></pre>
      <blockquote>
        <strong>autoExecute</strong> (<code>Boolean</code> | Default: <code>true</code>)
        <p>Reports whether the request should be fired on object instantiation.</p>
      </blockquote>

      <blockquote>
        <strong>useLoader</strong> (<code>Boolean</code> | Default: <code>true</code>)
        <p>Tells whether to use the loader while not ending the Ajax request.</p>
      </blockquote>

      <blockquote>
        <strong>contentType</strong> (<code>String</code> | Default: <code>"application/x-www-form-urlencoded; charset=UTF-8"</code>)
        <p>Defines what type of content is sent.</p>
      </blockquote>

      <blockquote>
        <strong>url</strong> (<code>String</code> | Default: <code>null</code>)
        <p>Path of the request URL.</p>
      </blockquote>

      <blockquote>
        <strong>method</strong> (<code>String</code> | Default: <code>"GET"</code> | Options: <code>GET</code>,
        <code>POST</code>, <code>PUT</code>, <code>DELETE</code> )
        <p>Sets the method used in the request.</p>
      </blockquote>

      <blockquote>
        <strong>data</strong> (<code>Object</code> | Default: <code>{}</code> )
        <p>Data to be sent to the server. It is converted to a query string. It's appended to the url for requests.</p>
      </blockquote>

      <blockquote>
        <strong>dataType</strong> (<code>String</code> | Default: <code>"json"</code> | Options: <code>html</code>,
        <code>json</code>, <code>jsonp</code>, <code>script</code>, <code>xml</code> )
        <p>The type of data that you're expecting back from the server.</p>
      </blockquote>

      <blockquote>
        <strong>callbacks</strong> (<code>Object</code>)

        <blockquote>
          <strong>beforeSend</strong> (<code>Function</code> | Parameters: <code>jqXHR -> jqXHR</code>, <code>Object ->
        settings</code> )
          <p>A pre-request callback function that can be used to modify the jqXHR object before it is sent. Use this to
            set custom headers, etc. The jqXHR and settings objects are passed as arguments. This is an Ajax Event.
            Returning false in the beforeSend function will cancel the request.</p>
        </blockquote>

        <blockquote>
          <strong>complete</strong> (<code>Function</code> | Parameters: <code>jqXHR -> jqXHR</code>, <code>String ->
          textStatus</code> )
          <p>A function to be called when the request finishes (after success and error callbacks are executed). The
            function gets passed two arguments: The jqXHR  object and a string categorizing the status of the request
            ("success", "notmodified", "error", "timeout", "abort", or "parsererror").</p>
        </blockquote>


        <blockquote>
          <strong>error</strong> (<code>Function</code> | Parameters: <code>jqXHR -> jqXHR</code>, <code>String ->
          textStatus</code>, <code>String -> errorThrown</code> )
          <p>A function to be called if the request fails. The function receives three arguments: The jqXHR object, a
            string describing the type of error that occurred and an optional exception object, if one occurred.
            Possible values for the second argument (besides null) are "timeout", "error", "abort", and "parsererror".
            When an HTTP error occurs, errorThrown receives the textual portion of the HTTP status, such as "Not Found"
            or "Internal Server Error."</p>
        </blockquote>

        <blockquote>
          <strong>success</strong> (<code>Function</code> | Parameters: <code>PlainObject -> data</code>, <code>String ->
          textStatus</code>, <code>jqXHR -> jqXHR</code>)
          <p>A function to be called if the request succeeds. The function gets passed three arguments: The data
            returned from the server, formatted according to the dataType parameter; a string describing the status;
            and the jqXHR object.</p>
        </blockquote>
      </blockquote>

      <hr />
      <h4 id="methods">Methods</h4>
      <p>asdasda asd asdasd sg bdoasbclsahc yviasyvgcs</p>

      <pre class="prettyprint lang-js linenums"><%= %`var xhr;
xhr = new Lol.Ajax({autoExecute: false})` %></pre>

      <ul>
        <li>execute</li>
        <li>setContentType</li>
        <li>setUseLoader</li>
        <li>setUrl</li>
        <li>setMethod</li>
        <li>setData</li>
        <li>setDataType</li>
      </ul>
    </div>
  </div>
</div>
